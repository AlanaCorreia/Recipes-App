{"ast":null,"code":"var _jsxFileName = \"/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { MIN_PASSWORD_VALUE } from '../services/consts';\nimport '../Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Login() {\n  _s();\n\n  const [stateEmail, setStateEmail] = useState('');\n  const [statePassword, setStatePassword] = useState('');\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isRedirect, setIsRedirect] = useState(false); // FONTE: funcao para  validar email link: https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript\n\n  const validateEmail = email => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n  };\n\n  const validadeButton = () => {\n    if (statePassword.length > MIN_PASSWORD_VALUE && validateEmail(stateEmail)) {\n      setIsDisabled(false);\n    } else {\n      setIsDisabled(true);\n    }\n  };\n\n  function handleChange(_ref, setState) {\n    let {\n      target\n    } = _ref;\n    setState(target.value);\n  }\n\n  useEffect(() => {\n    validadeButton();\n  }, [stateEmail, statePassword]);\n\n  function clickButton() {\n    localStorage.setItem('mealsToken', 1);\n    localStorage.setItem('cocktailsToken', 1);\n    localStorage.setItem('user', JSON.stringify({\n      email: stateEmail\n    }));\n    setIsRedirect(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title-header\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"login-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        \"data-testid\": \"email-input\",\n        placeholder: \"Email\",\n        value: stateEmail,\n        onChange: event => handleChange(event, setStateEmail),\n        className: \"login-input-form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        \"data-testid\": \"password-input\",\n        placeholder: \"Password\",\n        value: statePassword,\n        onChange: event => handleChange(event, setStatePassword),\n        className: \"login-input-form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        disabled: isDisabled,\n        \"data-testid\": \"login-submit-btn\",\n        onClick: clickButton,\n        className: \"login-btn-entrar\",\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), isRedirect && /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/foods\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"uqBzUHJH3iRFjYIVZtjRSooVBfI=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/Login.js"],"names":["React","useState","useEffect","Redirect","MIN_PASSWORD_VALUE","Login","stateEmail","setStateEmail","statePassword","setStatePassword","isDisabled","setIsDisabled","isRedirect","setIsRedirect","validateEmail","email","re","test","validadeButton","length","handleChange","setState","target","value","clickButton","localStorage","setItem","JSON","stringify","event"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { MIN_PASSWORD_VALUE } from '../services/consts';\nimport '../Login.css';\n\nfunction Login() {\n  const [stateEmail, setStateEmail] = useState('');\n  const [statePassword, setStatePassword] = useState('');\n  const [isDisabled, setIsDisabled] = useState(true);\n  const [isRedirect, setIsRedirect] = useState(false);\n\n  // FONTE: funcao para  validar email link: https://stackoverflow.com/questions/46155/whats-the-best-way-to-validate-an-email-address-in-javascript\n  const validateEmail = (email) => {\n    const re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n  };\n\n  const validadeButton = () => {\n    if (statePassword.length > MIN_PASSWORD_VALUE && validateEmail(stateEmail)) {\n      setIsDisabled(false);\n    } else {\n      setIsDisabled(true);\n    }\n  };\n\n  function handleChange({ target }, setState) {\n    setState(target.value);\n  }\n\n  useEffect(() => {\n    validadeButton();\n  }, [stateEmail, statePassword]);\n\n  function clickButton() {\n    localStorage.setItem('mealsToken', 1);\n    localStorage.setItem('cocktailsToken', 1);\n    localStorage.setItem('user', JSON.stringify({ email: stateEmail }));\n    setIsRedirect(true);\n  }\n\n  return (\n    <div className=\"login-container\">\n      <h1 className=\"title-header\">Login</h1>\n      <form className=\"login-form-container\">\n        <input\n          type=\"email\"\n          data-testid=\"email-input\"\n          placeholder=\"Email\"\n          value={ stateEmail }\n          onChange={ (event) => handleChange(event, setStateEmail) }\n          className=\"login-input-form\"\n        />\n        <input\n          type=\"password\"\n          data-testid=\"password-input\"\n          placeholder=\"Password\"\n          value={ statePassword }\n          onChange={ (event) => handleChange(event, setStatePassword) }\n          className=\"login-input-form\"\n        />\n        <button\n          type=\"button\"\n          disabled={ isDisabled }\n          data-testid=\"login-submit-btn\"\n          onClick={ clickButton }\n          className=\"login-btn-entrar\"\n        >\n          Enter\n        </button>\n      </form>\n      {isRedirect && <Redirect to=\"/foods\" />}\n    </div>\n  );\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}