{"ast":null,"code":"var _jsxFileName = \"/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/FoodsByIdInProgress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport getIngredientsAndMeasure from '../helpers/getIngredientsAndMeasure';\nimport fetchFoodApi from '../services/fetchApiFood';\nimport shareIcon from '../images/shareIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport { checkRecipeFavorite, removeFavoriteRecipe, setStorageFavoriteFood } from '../helpers/localStorage';\nimport '../DetailsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst copy = require('clipboard-copy');\n\nfunction FoodsByIdInProgress() {\n  _s();\n\n  const history = useHistory();\n  const {\n    location: {\n      pathname\n    }\n  } = history;\n  const [recipeFood, setRecipeFood] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [measure, setMeasure] = useState([]);\n  const [checkedIngredients, setCheckedIngredients] = useState([]);\n  const [checkCopy, setCheckCopy] = useState(false);\n  const [checkFavorite, setCheckFavorite] = useState(false);\n  const [checkDone, setCheckDone] = useState(true);\n  const id = pathname.replace(/[^0-9]/g, '');\n\n  async function getFetchFoodApi() {\n    const resultsApi = await fetchFoodApi(`lookup.php?i=${id}`);\n    setRecipeFood(resultsApi.meals);\n    const ingredientsReturn = getIngredientsAndMeasure('9', '29', resultsApi.meals);\n    setIngredients(ingredientsReturn.filter(element => element[0].includes('strIngredient') && element[1] !== null && element[1] !== ''));\n    const measuresReturn = getIngredientsAndMeasure('29', '48', resultsApi.meals);\n    setMeasure(measuresReturn.filter(element => element[1] !== ' '));\n  } // Função responsável por atualizar a chave meals com novas receitas\n\n\n  const progressStore = ingredientsToStore => {\n    // Armazena o valor da chave inProgressRecipes na variável\n    const progressStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    console.log('entrou na função');\n\n    if (!progressStorage.meals) {\n      // Caso a chave inProgressRecipes exista, mas não tenha a chave meals, cria-se a chave meals com um objeto vazio\n      // e armazena no localStorage\n      progressStorage.meals = {};\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    } else if (progressStorage.meals) {\n      progressStorage.meals[id] = ingredientsToStore;\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    } // else {\n    //   progressStorage.meals[id] = ingredientsToStore;\n    // }\n    // Se a chave inProgressRecipes e a chave meals existirem, cria-se a chave id da receita com o valor dos ingredientes com check\n    // e armazena no localStorage\n\n\n    localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n  }; // Função que seta inicialmente o localStorage\n\n\n  function getProgressStorageInicial() {\n    // Armazena o valor da chave inProgressRecipes na variável\n    let inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes')); // Se a chave inProgressRecipes não existir, cria-se esta chave com o valor meals, que recebe um objeto vazio;\n\n    if (inProgressRecipes === null) {\n      inProgressRecipes = {\n        meals: {}\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    } // Se a chave meals com a chave do id da receita existir, atualiza o estado dos ingredientes com check com os ingredientes salvos no localStorage\n\n\n    if (inProgressRecipes.meals && inProgressRecipes.meals[id]) {\n      setCheckedIngredients(inProgressRecipes.meals[id]);\n    }\n  }\n\n  function checkIsFavorite() {\n    setCheckFavorite(checkRecipeFavorite(id));\n  }\n\n  useEffect(() => {\n    getFetchFoodApi();\n    getProgressStorageInicial();\n    checkIsFavorite();\n  }, []);\n\n  function finishButtonValidate() {\n    const checkboxs = document.querySelectorAll('.checkBoxs');\n\n    if (checkboxs.length > 0) {\n      const arrayOfCheckeds = [];\n      checkboxs.forEach(element => {\n        if (element.checked) {\n          arrayOfCheckeds.push(element.checked);\n        }\n      });\n\n      if (checkboxs.length === arrayOfCheckeds.length) {\n        setCheckDone(false);\n      }\n    }\n  }\n\n  useEffect(() => {\n    finishButtonValidate();\n  }, [checkedIngredients]);\n\n  function handleCheckbox(_ref) {\n    let {\n      target\n    } = _ref;\n    const ingredient = target.parentNode.firstChild.nextSibling.innerText;\n    let result;\n\n    if (target.checked === true) {\n      result = [...checkedIngredients, ingredient];\n    } else {\n      result = checkedIngredients.filter(i => i !== ingredient);\n    }\n\n    setCheckedIngredients(result);\n    progressStore(result);\n  }\n\n  function clipboardCopy(idLink) {\n    copy(`http://localhost:3000/foods/${idLink}`);\n    setCheckCopy(true);\n  }\n\n  function clickFavorite() {\n    if (checkFavorite) {\n      setCheckFavorite(false);\n      removeFavoriteRecipe(id);\n    } else {\n      setCheckFavorite(true);\n      setStorageFavoriteFood(recipeFood[0]);\n    }\n  }\n\n  function clickButtonFinish() {\n    history.push('/done-recipes');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"details-page-default\",\n    children: [checkCopy && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Link copied!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 23\n    }, this), recipeFood.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        \"data-testid\": \"recipe-photo\",\n        src: recipe.strMealThumb,\n        alt: recipe.strMeal,\n        className: \"img-recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-details-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          \"data-testid\": \"recipe-title\",\n          className: \"title-recipe\",\n          children: recipe.strMeal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-testid\": \"share-btn\",\n            type: \"button\",\n            className: \"icon-btn\",\n            onClick: () => clipboardCopy(recipe.idMeal),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: shareIcon,\n              alt: \"share Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"icon-btn\",\n            onClick: clickFavorite,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              \"data-testid\": \"favorite-btn\",\n              src: checkFavorite ? blackHeartIcon : whiteHeartIcon,\n              alt: checkFavorite ? 'black Heart Icon\"' : 'white Heart Icon'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"details-recipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"recipe-category\",\n          className: \"category\",\n          children: recipe.strCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"subtitles-recipe\",\n          children: \"Ingredients:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"ingredientsList\",\n          className: \"ingredients-list\",\n          children: ingredients.length > 0 && measure.length > 0 && ingredients.map((element, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            \"data-testid\": `${index}-ingredient-step`,\n            className: checkedIngredients.includes(element[1]) ? 'selected' : 'not-selected',\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"checkBoxs\",\n              onClick: event => handleCheckbox(event),\n              defaultChecked: checkedIngredients.includes(element[1])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ingredient-text\",\n              children: element[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 23\n            }, this), ' ', measure[index] !== null && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"measure-text\",\n              children: measure[index][1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 26\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"subtitles-recipe\",\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions-container\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"instructions\",\n            className: \"instructions-text\",\n            children: recipe.strInstructions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-finish-recipe\",\n          \"data-testid\": \"finish-recipe-btn\",\n          type: \"button\",\n          disabled: checkDone,\n          onClick: () => clickButtonFinish(),\n          children: \"Finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, recipe.idMeal, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FoodsByIdInProgress, \"BfwZ7UwY8VaIOuIryyJtewPJy0I=\", false, function () {\n  return [useHistory];\n});\n\n_c = FoodsByIdInProgress;\nexport default FoodsByIdInProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"FoodsByIdInProgress\");","map":{"version":3,"sources":["/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/FoodsByIdInProgress.js"],"names":["React","useState","useEffect","useHistory","getIngredientsAndMeasure","fetchFoodApi","shareIcon","whiteHeartIcon","blackHeartIcon","checkRecipeFavorite","removeFavoriteRecipe","setStorageFavoriteFood","copy","require","FoodsByIdInProgress","history","location","pathname","recipeFood","setRecipeFood","ingredients","setIngredients","measure","setMeasure","checkedIngredients","setCheckedIngredients","checkCopy","setCheckCopy","checkFavorite","setCheckFavorite","checkDone","setCheckDone","id","replace","getFetchFoodApi","resultsApi","meals","ingredientsReturn","filter","element","includes","measuresReturn","progressStore","ingredientsToStore","progressStorage","JSON","parse","localStorage","getItem","console","log","setItem","stringify","getProgressStorageInicial","inProgressRecipes","checkIsFavorite","finishButtonValidate","checkboxs","document","querySelectorAll","length","arrayOfCheckeds","forEach","checked","push","handleCheckbox","target","ingredient","parentNode","firstChild","nextSibling","innerText","result","i","clipboardCopy","idLink","clickFavorite","clickButtonFinish","map","recipe","strMealThumb","strMeal","idMeal","strCategory","index","event","strInstructions"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport getIngredientsAndMeasure from '../helpers/getIngredientsAndMeasure';\nimport fetchFoodApi from '../services/fetchApiFood';\nimport shareIcon from '../images/shareIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport { checkRecipeFavorite, removeFavoriteRecipe,\n  setStorageFavoriteFood } from '../helpers/localStorage';\nimport '../DetailsPage.css';\n\nconst copy = require('clipboard-copy');\n\nfunction FoodsByIdInProgress() {\n  const history = useHistory();\n  const { location: { pathname } } = history;\n  const [recipeFood, setRecipeFood] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [measure, setMeasure] = useState([]);\n  const [checkedIngredients, setCheckedIngredients] = useState([]);\n  const [checkCopy, setCheckCopy] = useState(false);\n  const [checkFavorite, setCheckFavorite] = useState(false);\n  const [checkDone, setCheckDone] = useState(true);\n\n  const id = pathname.replace(/[^0-9]/g, '');\n\n  async function getFetchFoodApi() {\n    const resultsApi = await fetchFoodApi(`lookup.php?i=${id}`);\n    setRecipeFood(resultsApi.meals);\n    const ingredientsReturn = getIngredientsAndMeasure('9', '29', resultsApi.meals);\n    setIngredients(ingredientsReturn\n      .filter((element) => element[0].includes('strIngredient')\n    && element[1] !== null && element[1] !== ''));\n    const measuresReturn = getIngredientsAndMeasure('29', '48', resultsApi.meals);\n    setMeasure(measuresReturn.filter((element) => element[1] !== ' '));\n  }\n\n  // Função responsável por atualizar a chave meals com novas receitas\n  const progressStore = (ingredientsToStore) => {\n    // Armazena o valor da chave inProgressRecipes na variável\n    const progressStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n    console.log('entrou na função');\n\n    if (!progressStorage.meals) {\n      // Caso a chave inProgressRecipes exista, mas não tenha a chave meals, cria-se a chave meals com um objeto vazio\n      // e armazena no localStorage\n      progressStorage.meals = {};\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    } else if (progressStorage.meals) {\n      progressStorage.meals[id] = ingredientsToStore;\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    }\n    // else {\n    //   progressStorage.meals[id] = ingredientsToStore;\n    // }\n    // Se a chave inProgressRecipes e a chave meals existirem, cria-se a chave id da receita com o valor dos ingredientes com check\n    // e armazena no localStorage\n    localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n  };\n\n  // Função que seta inicialmente o localStorage\n  function getProgressStorageInicial() {\n    // Armazena o valor da chave inProgressRecipes na variável\n    let inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    // Se a chave inProgressRecipes não existir, cria-se esta chave com o valor meals, que recebe um objeto vazio;\n    if (inProgressRecipes === null) {\n      inProgressRecipes = { meals: {} };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n    // Se a chave meals com a chave do id da receita existir, atualiza o estado dos ingredientes com check com os ingredientes salvos no localStorage\n    if (inProgressRecipes.meals && inProgressRecipes.meals[id]) {\n      setCheckedIngredients(inProgressRecipes.meals[id]);\n    }\n  }\n\n  function checkIsFavorite() {\n    setCheckFavorite(checkRecipeFavorite(id));\n  }\n\n  useEffect(() => {\n    getFetchFoodApi();\n    getProgressStorageInicial();\n    checkIsFavorite();\n  }, []);\n\n  function finishButtonValidate() {\n    const checkboxs = document.querySelectorAll('.checkBoxs');\n    if (checkboxs.length > 0) {\n      const arrayOfCheckeds = [];\n      checkboxs.forEach((element) => {\n        if (element.checked) {\n          arrayOfCheckeds.push(element.checked);\n        }\n      });\n      if (checkboxs.length === arrayOfCheckeds.length) {\n        setCheckDone(false);\n      }\n    }\n  }\n\n  useEffect(() => {\n    finishButtonValidate();\n  }, [checkedIngredients]);\n\n  function handleCheckbox({ target }) {\n    const ingredient = target.parentNode.firstChild.nextSibling.innerText;\n    let result;\n\n    if (target.checked === true) {\n      result = [...checkedIngredients, ingredient];\n    } else {\n      result = checkedIngredients.filter((i) => i !== ingredient);\n    }\n\n    setCheckedIngredients(result);\n    progressStore(result);\n  }\n\n  function clipboardCopy(idLink) {\n    copy(`http://localhost:3000/foods/${idLink}`);\n    setCheckCopy(true);\n  }\n\n  function clickFavorite() {\n    if (checkFavorite) {\n      setCheckFavorite(false);\n      removeFavoriteRecipe(id);\n    } else {\n      setCheckFavorite(true);\n      setStorageFavoriteFood(recipeFood[0]);\n    }\n  }\n\n  function clickButtonFinish() {\n    history.push('/done-recipes');\n  }\n\n  return (\n    <div className=\"details-page-default\">\n      { checkCopy && (<p>Link copied!</p>)}\n      {recipeFood.map((recipe) => (\n        <div key={ recipe.idMeal }>\n          <img\n            data-testid=\"recipe-photo\"\n            src={ recipe.strMealThumb }\n            alt={ recipe.strMeal }\n            className=\"img-recipe\"\n          />\n          <div className=\"header-details-container\">\n            <h1 data-testid=\"recipe-title\" className=\"title-recipe\">\n              {recipe.strMeal}\n            </h1>\n            <div>\n              <button\n                data-testid=\"share-btn\"\n                type=\"button\"\n                className=\"icon-btn\"\n                onClick={ () => clipboardCopy(recipe.idMeal) }\n              >\n                <img src={ shareIcon } alt=\"share Icon\" />\n              </button>\n              <button\n                type=\"button\"\n                className=\"icon-btn\"\n                onClick={ clickFavorite }\n              >\n                <img\n                  data-testid=\"favorite-btn\"\n                  src={ checkFavorite\n                    ? blackHeartIcon : whiteHeartIcon }\n                  alt={ checkFavorite\n                    ? 'black Heart Icon\"' : 'white Heart Icon' }\n                />\n              </button>\n            </div>\n          </div>\n          <div className=\"details-recipe-container\">\n            <p data-testid=\"recipe-category\" className=\"category\">\n              {recipe.strCategory}\n            </p>\n            <h2 className=\"subtitles-recipe\">Ingredients:</h2>\n            <ul id=\"ingredientsList\" className=\"ingredients-list\">\n              {ingredients.length > 0 && measure.length > 0\n                  && ingredients.map((element, index) => (\n                    <li\n                      key={ index }\n                      data-testid={ `${index}-ingredient-step` }\n                      className={\n                        checkedIngredients.includes(element[1])\n                          ? 'selected' : 'not-selected'\n                      }\n                    >\n                      <input\n                        type=\"checkbox\"\n                        className=\"checkBoxs\"\n                        onClick={ (event) => handleCheckbox(event) }\n                        defaultChecked={ checkedIngredients.includes(element[1]) }\n                      />\n                      <span className=\"ingredient-text\">{element[1]}</span>\n                      {' '}\n                      { measure[index] !== null\n                      && <span className=\"measure-text\">{measure[index][1]}</span>}\n                    </li>\n                  ))}\n            </ul>\n            <h2 className=\"subtitles-recipe\">Instructions</h2>\n            <div className=\"instructions-container\">\n              <p data-testid=\"instructions\" className=\"instructions-text\">\n                {recipe.strInstructions}\n              </p>\n            </div>\n            <button\n              className=\"button-finish-recipe\"\n              data-testid=\"finish-recipe-btn\"\n              type=\"button\"\n              disabled={ checkDone }\n              onClick={ () => clickButtonFinish() }\n            >\n              Finish\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default FoodsByIdInProgress;\n"]},"metadata":{},"sourceType":"module"}