{"ast":null,"code":"import { MAX_NUMBER_CARDS } from './consts'; // Recebe os valores da API de foods e lida com esses valores.\n\nasync function validateMeals(name, dataFoodToValidate, setApiResultsSplited) {\n  if (dataFoodToValidate !== undefined) {\n    if (dataFoodToValidate.meals === null) {\n      global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n    } else if (dataFoodToValidate.meals.length >= MAX_NUMBER_CARDS) {\n      const splitedArray = dataFoodToValidate[name].slice(0, MAX_NUMBER_CARDS);\n      setApiResultsSplited({\n        [name]: splitedArray\n      });\n    } else {\n      setApiResultsSplited({\n        [name]: dataFoodToValidate.meals\n      });\n    }\n  }\n}\n/* else if (dataFoodToValidate.meals.length === 1) {\n      history.push(`/foods/${dataFoodToValidate.meals[0].idMeal}`);\n  } */\n// Recebe os valores da API de drinks e lida com esses valores.\n\n\nasync function validateDrinks(name, dataDrinkToValidate, setApiResultsSplited) {\n  if (dataDrinkToValidate !== undefined) {\n    if (dataDrinkToValidate.drinks === null) {\n      global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n    } else if (dataDrinkToValidate.drinks.length >= MAX_NUMBER_CARDS) {\n      const splitedArray = dataDrinkToValidate[name].slice(0, MAX_NUMBER_CARDS);\n      setApiResultsSplited({\n        [name]: splitedArray\n      });\n    } else {\n      setApiResultsSplited({\n        [name]: dataDrinkToValidate.drinks\n      });\n    }\n  }\n}\n/* else if (dataDrinkToValidate.drinks.length === 1) {\n      history.push(`/drinks/${dataDrinkToValidate.drinks[0].idDrink}`);\n    } */\n\n\nexport { validateMeals, validateDrinks };","map":{"version":3,"sources":["/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/services/validateDatas.js"],"names":["MAX_NUMBER_CARDS","validateMeals","name","dataFoodToValidate","setApiResultsSplited","undefined","meals","global","alert","length","splitedArray","slice","validateDrinks","dataDrinkToValidate","drinks"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,UAAjC,C,CAEA;;AACA,eAAeC,aAAf,CAA6BC,IAA7B,EAAmCC,kBAAnC,EAAuDC,oBAAvD,EAA6E;AAC3E,MAAID,kBAAkB,KAAKE,SAA3B,EAAsC;AACpC,QAAIF,kBAAkB,CAACG,KAAnB,KAA6B,IAAjC,EAAuC;AACrCC,MAAAA,MAAM,CAACC,KAAP,CAAa,yDAAb;AACD,KAFD,MAEO,IAAIL,kBAAkB,CAACG,KAAnB,CAAyBG,MAAzB,IAAmCT,gBAAvC,EAAyD;AAC9D,YAAMU,YAAY,GAAGP,kBAAkB,CAACD,IAAD,CAAlB,CAAyBS,KAAzB,CAA+B,CAA/B,EAAkCX,gBAAlC,CAArB;AACAI,MAAAA,oBAAoB,CAAC;AAAE,SAACF,IAAD,GAAQQ;AAAV,OAAD,CAApB;AACD,KAHM,MAGA;AACLN,MAAAA,oBAAoB,CAAC;AAAE,SAACF,IAAD,GAAQC,kBAAkB,CAACG;AAA7B,OAAD,CAApB;AACD;AACF;AACF;AACD;AACA;AACA;AAEA;;;AACA,eAAeM,cAAf,CAA8BV,IAA9B,EAAoCW,mBAApC,EAAyDT,oBAAzD,EAA+E;AAC7E,MAAIS,mBAAmB,KAAKR,SAA5B,EAAuC;AACrC,QAAIQ,mBAAmB,CAACC,MAApB,KAA+B,IAAnC,EAAyC;AACvCP,MAAAA,MAAM,CAACC,KAAP,CAAa,yDAAb;AACD,KAFD,MAEO,IAAIK,mBAAmB,CAACC,MAApB,CAA2BL,MAA3B,IAAqCT,gBAAzC,EAA2D;AAChE,YAAMU,YAAY,GAAGG,mBAAmB,CAACX,IAAD,CAAnB,CAA0BS,KAA1B,CAAgC,CAAhC,EAAmCX,gBAAnC,CAArB;AACAI,MAAAA,oBAAoB,CAAC;AAAE,SAACF,IAAD,GAAQQ;AAAV,OAAD,CAApB;AACD,KAHM,MAGA;AACLN,MAAAA,oBAAoB,CAAC;AAAE,SAACF,IAAD,GAAQW,mBAAmB,CAACC;AAA9B,OAAD,CAApB;AACD;AACF;AACF;AACD;AACA;AACA;;;AACA,SAASb,aAAT,EAAwBW,cAAxB","sourcesContent":["import { MAX_NUMBER_CARDS } from './consts';\n\n// Recebe os valores da API de foods e lida com esses valores.\nasync function validateMeals(name, dataFoodToValidate, setApiResultsSplited) {\n  if (dataFoodToValidate !== undefined) {\n    if (dataFoodToValidate.meals === null) {\n      global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n    } else if (dataFoodToValidate.meals.length >= MAX_NUMBER_CARDS) {\n      const splitedArray = dataFoodToValidate[name].slice(0, MAX_NUMBER_CARDS);\n      setApiResultsSplited({ [name]: splitedArray });\n    } else {\n      setApiResultsSplited({ [name]: dataFoodToValidate.meals });\n    }\n  }\n}\n/* else if (dataFoodToValidate.meals.length === 1) {\n      history.push(`/foods/${dataFoodToValidate.meals[0].idMeal}`);\n  } */\n\n// Recebe os valores da API de drinks e lida com esses valores.\nasync function validateDrinks(name, dataDrinkToValidate, setApiResultsSplited) {\n  if (dataDrinkToValidate !== undefined) {\n    if (dataDrinkToValidate.drinks === null) {\n      global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n    } else if (dataDrinkToValidate.drinks.length >= MAX_NUMBER_CARDS) {\n      const splitedArray = dataDrinkToValidate[name].slice(0, MAX_NUMBER_CARDS);\n      setApiResultsSplited({ [name]: splitedArray });\n    } else {\n      setApiResultsSplited({ [name]: dataDrinkToValidate.drinks });\n    }\n  }\n}\n/* else if (dataDrinkToValidate.drinks.length === 1) {\n      history.push(`/drinks/${dataDrinkToValidate.drinks[0].idDrink}`);\n    } */\nexport { validateMeals, validateDrinks };\n"]},"metadata":{},"sourceType":"module"}