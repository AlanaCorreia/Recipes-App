{"ast":null,"code":"var _jsxFileName = \"/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/DrinksByIdInProgress.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport getIngredientsAndMeasure from '../helpers/getIngredientsAndMeasure';\nimport fetchDrinkApi from '../services/fetchApiDrink';\nimport shareIcon from '../images/shareIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport { checkRecipeFavorite, removeFavoriteRecipe, setStorageFavoriteDrink } from '../helpers/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst copy = require('clipboard-copy');\n\nfunction DrinksByIdInProgress() {\n  _s();\n\n  const history = useHistory();\n  const {\n    location: {\n      pathname\n    }\n  } = history;\n  const [recipeDrink, setRecipeDrink] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [measure, setMeasure] = useState([]);\n  const [checkedIngredients, setCheckedIngredients] = useState([]);\n  const id = pathname.replace(/[^0-9]/g, '');\n  const [checkCopy, setCheckCopy] = useState(false);\n  const [checkFavorite, setCheckFavorite] = useState(false);\n  const [checkDone, setCheckDone] = useState(true);\n\n  function checkIsFavorite() {\n    setCheckFavorite(checkRecipeFavorite(id));\n  }\n\n  async function getFetchDrinkApi() {\n    const resultsApi = await fetchDrinkApi(`lookup.php?i=${id}`);\n    setRecipeDrink(resultsApi.drinks);\n    const ingredientsReturn = getIngredientsAndMeasure('17', '32', resultsApi.drinks);\n    setIngredients(ingredientsReturn.filter(element => element[0].includes('strIngredient') && element[1] !== null && element[1] !== ''));\n    const measuresReturn = getIngredientsAndMeasure('32', '47', resultsApi.drinks);\n    setMeasure(measuresReturn.filter(element => element[0].includes('strMeasure') && element[1] !== null && element[1] !== ''));\n  } // Função responsável por atualizar a chave cocktails com novas receitas\n\n\n  const progressStore = ingredientsToStore => {\n    // Armazena o valor da chave inProgressRecipes na variável\n    const progressStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    if (!progressStorage.cocktails) {\n      // Caso a chave inProgressRecipes exista, mas não tenha a chave cocktails, cria-se a chave cocktails com um objeto vazio\n      // e armazena no localStorage\n      progressStorage.cocktails = {};\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    } else if (progressStorage.cocktails) {\n      progressStorage.cocktails[id] = ingredientsToStore;\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    } // Se a chave inProgressRecipes e a chave cocktails existirem, cria-se a chave id da receita com o valor dos ingredientes com check\n    // e armazena no localStorage\n\n\n    localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n  }; // Função que seta inicialmente o localStorage\n\n\n  function getProgressStorageInicial() {\n    // Armazena o valor da chave inProgressRecipes na variável\n    let inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes')); // Se a chave inProgressRecipes não existir, cria-se esta chave com o valor cocktails, que recebe um objeto vazio;\n\n    if (inProgressRecipes === null) {\n      inProgressRecipes = {\n        cocktails: {}\n      };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    } // Se a chave cocktails com a chave do id da receita existir, atualiza o estado dos ingredientes com check com os ingredientes salvos no localStorage\n\n\n    if (inProgressRecipes.cocktails && inProgressRecipes.cocktails[id]) {\n      setCheckedIngredients(inProgressRecipes.cocktails[id]);\n    }\n  }\n\n  function finishButtonValidate() {\n    const checkboxs = document.querySelectorAll('.checkBoxs');\n\n    if (checkboxs.length > 0) {\n      const arrayOfCheckeds = [];\n      checkboxs.forEach(element => {\n        if (element.checked) {\n          arrayOfCheckeds.push(element.checked);\n        }\n      });\n\n      if (checkboxs.length === arrayOfCheckeds.length) {\n        setCheckDone(false);\n      }\n    }\n  }\n\n  useEffect(() => {\n    finishButtonValidate();\n  }, [checkedIngredients]);\n  useEffect(() => {\n    getFetchDrinkApi();\n    getProgressStorageInicial();\n    checkIsFavorite();\n  }, []);\n\n  function handleCheckbox(_ref) {\n    let {\n      target\n    } = _ref;\n    const ingredient = target.parentNode.firstChild.nextSibling.innerText;\n    let result;\n\n    if (target.checked === true) {\n      result = [...checkedIngredients, ingredient];\n    } else {\n      result = checkedIngredients.filter(checkedIngred => checkedIngred !== ingredient);\n    }\n\n    setCheckedIngredients(result);\n    progressStore(result);\n  }\n\n  function clipboardCopy(idLink) {\n    copy(`http://localhost:3000/drinks/${idLink}`);\n    setCheckCopy(true);\n  }\n\n  function clickFavorite() {\n    if (checkFavorite) {\n      setCheckFavorite(false);\n      removeFavoriteRecipe(id);\n    } else {\n      setCheckFavorite(true);\n      setStorageFavoriteDrink(recipeDrink[0]);\n    }\n  }\n\n  function clickButtonFinish() {\n    history.push('/done-recipes');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"details-page-default\",\n    children: [checkCopy && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Link copied!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 23\n    }, this), recipeDrink.map(recipe => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        \"data-testid\": \"recipe-photo\",\n        src: recipe.strDrinkThumb,\n        alt: recipe.strDrink,\n        className: \"img-recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-details-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          \"data-testid\": \"recipe-title\",\n          className: \"title-recipe\",\n          children: recipe.strDrink\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-testid\": \"share-btn\",\n            type: \"button\",\n            className: \"icon-btn\",\n            onClick: () => clipboardCopy(recipe.idDrink),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: shareIcon,\n              alt: \"share Icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"icon-btn\",\n            onClick: clickFavorite,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              \"data-testid\": \"favorite-btn\",\n              src: checkFavorite ? blackHeartIcon : whiteHeartIcon,\n              alt: checkFavorite ? 'black Heart Icon\"' : 'white Heart Icon'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"details-recipe-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          \"data-testid\": \"recipe-category\",\n          className: \"category\",\n          children: recipe.strCategory\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"subtitles-recipe\",\n          children: \"Ingredients:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"ingredientsList\",\n          className: \"ingredients-list\",\n          children: ingredients.length > 0 && measure.length > 0 && ingredients.map((element, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            \"data-testid\": `${index}-ingredient-step`,\n            className: checkedIngredients.includes(element[1]) ? 'selected' : 'not-selected',\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"checkBoxs\",\n              onClick: event => handleCheckbox(event),\n              defaultChecked: checkedIngredients.includes(element[1])\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"ingredient-text\",\n              children: element[1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 23\n            }, this), ' ', measure[index] !== null && measure.length === 1 ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"measure-text\",\n              children: measure[0][1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 27\n            }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"measure-text\",\n              children: measure[index][1]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 27\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"subtitles-recipe\",\n          children: \"Instructions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"instructions-container\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"instructions\",\n            className: \"instructions-text\",\n            children: recipe.strInstructions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button-finish-recipe\",\n          type: \"button\",\n          \"data-testid\": \"finish-recipe-btn\",\n          disabled: checkDone,\n          onClick: () => clickButtonFinish(),\n          children: \"Finish\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this)]\n    }, recipe.idDrink, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DrinksByIdInProgress, \"WcGqxl0u+13NG0DuUx2u7bXrEo8=\", false, function () {\n  return [useHistory];\n});\n\n_c = DrinksByIdInProgress;\nexport default DrinksByIdInProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"DrinksByIdInProgress\");","map":{"version":3,"sources":["/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/DrinksByIdInProgress.js"],"names":["React","useEffect","useState","useHistory","getIngredientsAndMeasure","fetchDrinkApi","shareIcon","whiteHeartIcon","blackHeartIcon","checkRecipeFavorite","removeFavoriteRecipe","setStorageFavoriteDrink","copy","require","DrinksByIdInProgress","history","location","pathname","recipeDrink","setRecipeDrink","ingredients","setIngredients","measure","setMeasure","checkedIngredients","setCheckedIngredients","id","replace","checkCopy","setCheckCopy","checkFavorite","setCheckFavorite","checkDone","setCheckDone","checkIsFavorite","getFetchDrinkApi","resultsApi","drinks","ingredientsReturn","filter","element","includes","measuresReturn","progressStore","ingredientsToStore","progressStorage","JSON","parse","localStorage","getItem","cocktails","setItem","stringify","getProgressStorageInicial","inProgressRecipes","finishButtonValidate","checkboxs","document","querySelectorAll","length","arrayOfCheckeds","forEach","checked","push","handleCheckbox","target","ingredient","parentNode","firstChild","nextSibling","innerText","result","checkedIngred","clipboardCopy","idLink","clickFavorite","clickButtonFinish","map","recipe","strDrinkThumb","strDrink","idDrink","strCategory","index","event","strInstructions"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport getIngredientsAndMeasure from '../helpers/getIngredientsAndMeasure';\nimport fetchDrinkApi from '../services/fetchApiDrink';\nimport shareIcon from '../images/shareIcon.svg';\nimport whiteHeartIcon from '../images/whiteHeartIcon.svg';\nimport blackHeartIcon from '../images/blackHeartIcon.svg';\nimport { checkRecipeFavorite, removeFavoriteRecipe,\n  setStorageFavoriteDrink } from '../helpers/localStorage';\n\nconst copy = require('clipboard-copy');\n\nfunction DrinksByIdInProgress() {\n  const history = useHistory();\n  const {\n    location: { pathname },\n  } = history;\n  const [recipeDrink, setRecipeDrink] = useState([]);\n  const [ingredients, setIngredients] = useState([]);\n  const [measure, setMeasure] = useState([]);\n  const [checkedIngredients, setCheckedIngredients] = useState([]);\n  const id = pathname.replace(/[^0-9]/g, '');\n  const [checkCopy, setCheckCopy] = useState(false);\n  const [checkFavorite, setCheckFavorite] = useState(false);\n  const [checkDone, setCheckDone] = useState(true);\n\n  function checkIsFavorite() {\n    setCheckFavorite(checkRecipeFavorite(id));\n  }\n\n  async function getFetchDrinkApi() {\n    const resultsApi = await fetchDrinkApi(`lookup.php?i=${id}`);\n    setRecipeDrink(resultsApi.drinks);\n\n    const ingredientsReturn = getIngredientsAndMeasure(\n      '17',\n      '32',\n      resultsApi.drinks,\n    );\n    setIngredients(\n      ingredientsReturn.filter(\n        (element) => element[0].includes('strIngredient')\n              && element[1] !== null\n              && element[1] !== '',\n      ),\n    );\n    const measuresReturn = getIngredientsAndMeasure('32', '47', resultsApi.drinks);\n    setMeasure(measuresReturn.filter((element) => element[0].includes('strMeasure')\n    && element[1] !== null && element[1] !== ''));\n  }\n\n  // Função responsável por atualizar a chave cocktails com novas receitas\n  const progressStore = (ingredientsToStore) => {\n    // Armazena o valor da chave inProgressRecipes na variável\n    const progressStorage = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    if (!progressStorage.cocktails) {\n      // Caso a chave inProgressRecipes exista, mas não tenha a chave cocktails, cria-se a chave cocktails com um objeto vazio\n      // e armazena no localStorage\n      progressStorage.cocktails = {};\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    } else if (progressStorage.cocktails) {\n      progressStorage.cocktails[id] = ingredientsToStore;\n      localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n    }\n    // Se a chave inProgressRecipes e a chave cocktails existirem, cria-se a chave id da receita com o valor dos ingredientes com check\n    // e armazena no localStorage\n    localStorage.setItem('inProgressRecipes', JSON.stringify(progressStorage));\n  };\n\n  // Função que seta inicialmente o localStorage\n  function getProgressStorageInicial() {\n    // Armazena o valor da chave inProgressRecipes na variável\n    let inProgressRecipes = JSON.parse(localStorage.getItem('inProgressRecipes'));\n\n    // Se a chave inProgressRecipes não existir, cria-se esta chave com o valor cocktails, que recebe um objeto vazio;\n    if (inProgressRecipes === null) {\n      inProgressRecipes = { cocktails: {} };\n      localStorage.setItem('inProgressRecipes', JSON.stringify(inProgressRecipes));\n    }\n    // Se a chave cocktails com a chave do id da receita existir, atualiza o estado dos ingredientes com check com os ingredientes salvos no localStorage\n    if (inProgressRecipes.cocktails && inProgressRecipes.cocktails[id]) {\n      setCheckedIngredients(inProgressRecipes.cocktails[id]);\n    }\n  }\n\n  function finishButtonValidate() {\n    const checkboxs = document.querySelectorAll('.checkBoxs');\n    if (checkboxs.length > 0) {\n      const arrayOfCheckeds = [];\n      checkboxs.forEach((element) => {\n        if (element.checked) {\n          arrayOfCheckeds.push(element.checked);\n        }\n      });\n      if (checkboxs.length === arrayOfCheckeds.length) {\n        setCheckDone(false);\n      }\n    }\n  }\n\n  useEffect(() => {\n    finishButtonValidate();\n  }, [checkedIngredients]);\n\n  useEffect(() => {\n    getFetchDrinkApi();\n    getProgressStorageInicial();\n    checkIsFavorite();\n  }, []);\n\n  function handleCheckbox({ target }) {\n    const ingredient = target.parentNode.firstChild.nextSibling.innerText;\n    let result;\n\n    if (target.checked === true) {\n      result = [...checkedIngredients, ingredient];\n    } else {\n      result = checkedIngredients.filter((checkedIngred) => checkedIngred !== ingredient);\n    }\n\n    setCheckedIngredients(result);\n    progressStore(result);\n  }\n\n  function clipboardCopy(idLink) {\n    copy(`http://localhost:3000/drinks/${idLink}`);\n    setCheckCopy(true);\n  }\n\n  function clickFavorite() {\n    if (checkFavorite) {\n      setCheckFavorite(false);\n      removeFavoriteRecipe(id);\n    } else {\n      setCheckFavorite(true);\n      setStorageFavoriteDrink(recipeDrink[0]);\n    }\n  }\n\n  function clickButtonFinish() {\n    history.push('/done-recipes');\n  }\n\n  return (\n    <div className=\"details-page-default\">\n      { checkCopy && (<p>Link copied!</p>)}\n      {recipeDrink.map((recipe) => (\n        <div key={ recipe.idDrink }>\n          <img\n            data-testid=\"recipe-photo\"\n            src={ recipe.strDrinkThumb }\n            alt={ recipe.strDrink }\n            className=\"img-recipe\"\n          />\n          <div className=\"header-details-container\">\n            <h1 data-testid=\"recipe-title\" className=\"title-recipe\">\n              {recipe.strDrink}\n            </h1>\n            <div>\n              <button\n                data-testid=\"share-btn\"\n                type=\"button\"\n                className=\"icon-btn\"\n                onClick={ () => clipboardCopy(recipe.idDrink) }\n              >\n                <img src={ shareIcon } alt=\"share Icon\" />\n              </button>\n              <button\n                type=\"button\"\n                className=\"icon-btn\"\n                onClick={ clickFavorite }\n              >\n                <img\n                  data-testid=\"favorite-btn\"\n                  src={ checkFavorite\n                    ? blackHeartIcon : whiteHeartIcon }\n                  alt={ checkFavorite\n                    ? 'black Heart Icon\"' : 'white Heart Icon' }\n                />\n              </button>\n            </div>\n          </div>\n          <div className=\"details-recipe-container\">\n            <p data-testid=\"recipe-category\" className=\"category\">\n              {recipe.strCategory}\n            </p>\n            <h2 className=\"subtitles-recipe\">Ingredients:</h2>\n            <ul id=\"ingredientsList\" className=\"ingredients-list\">\n              {ingredients.length > 0\n                  && measure.length > 0\n                  && ingredients.map((element, index) => (\n                    <li\n                      key={ index }\n                      data-testid={ `${index}-ingredient-step` }\n                      className={\n                        checkedIngredients.includes(element[1])\n                          ? 'selected' : 'not-selected'\n                      }\n                    >\n                      <input\n                        type=\"checkbox\"\n                        className=\"checkBoxs\"\n                        onClick={ (event) => handleCheckbox(event) }\n                        defaultChecked={ checkedIngredients.includes(element[1]) }\n                      />\n                      <span className=\"ingredient-text\">{element[1]}</span>\n                      {' '}\n                      { measure[index] !== null && measure.length === 1\n                        ? <span className=\"measure-text\">{measure[0][1]}</span>\n                        : <span className=\"measure-text\">{measure[index][1]}</span>}\n                    </li>\n                  ))}\n            </ul>\n            <h2 className=\"subtitles-recipe\">Instructions</h2>\n            <div className=\"instructions-container\">\n              <p data-testid=\"instructions\" className=\"instructions-text\">\n                {recipe.strInstructions}\n              </p>\n            </div>\n            <button\n              className=\"button-finish-recipe\"\n              type=\"button\"\n              data-testid=\"finish-recipe-btn\"\n              disabled={ checkDone }\n              onClick={ () => clickButtonFinish() }\n            >\n              Finish\n            </button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default DrinksByIdInProgress;\n"]},"metadata":{},"sourceType":"module"}