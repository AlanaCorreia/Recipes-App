{"ast":null,"code":"var _jsxFileName = \"/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/ExploreFoodsNationalities.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\nimport SearchIcon from '../components/SearchIcon';\nimport { DEFAULT_URL_API, MAX_NUMBER_CARDS } from '../services/consts';\nimport fetchApiArea from '../services/fetchApiArea';\nimport fecthNacionalitesApi from '../services/fetchApiNacionalites';\nimport '../ExploreNationalities.css';\nimport fetchFoodApi from '../services/fetchApiFood';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExploreFoodsNationalities() {\n  _s();\n\n  const [nacionalities, setNacionalities] = useState(['All']);\n  const [selectValue, setSelectValue] = useState('All');\n  const [mealsOfArea, setMealsOfArea] = useState([]); // const [allFoods, setAllFoods] = useState([]);\n\n  const history = useHistory(); // Faz requisição para api com os países e seta no estado nacionalities\n\n  const getFetchNacionalities = async () => {\n    const dataNacionalities = await fecthNacionalitesApi();\n    const nacionalitiesKeys = dataNacionalities.map(_ref => {\n      let {\n        strArea\n      } = _ref;\n      return strArea;\n    });\n    setNacionalities([...nacionalities, ...nacionalitiesKeys]);\n  };\n\n  const defaultAPI = async () => {\n    const foodDefault = await fetchFoodApi(DEFAULT_URL_API);\n    const sliceFoodDefault = foodDefault.meals.slice(0, MAX_NUMBER_CARDS);\n    setMealsOfArea(sliceFoodDefault);\n  }; // Faz requisição das receitas baseadas na nacionalidade.\n  // Pega as 12 primeiras receitas e armazena no estado mealsOfArea\n\n\n  const getFetchArea = async () => {\n    const areaFoods = await fetchApiArea(selectValue);\n\n    if (areaFoods === null) {\n      return;\n    }\n\n    setMealsOfArea(areaFoods.slice(0, MAX_NUMBER_CARDS));\n  }; // Lida com valores da Api armazenados no estado mealsOfArea\n  // Nos casos não encontrar receita ou se houver apenas 1 receita\n\n\n  const mealsCondition = useCallback(async () => {\n    if (mealsOfArea !== undefined) {\n      if (mealsOfArea === null) {\n        global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n      } else if (mealsOfArea.length === 1) {\n        history.push(`/foods/${mealsOfArea[0].idMeal}`);\n      }\n    }\n  }, [mealsOfArea, history]); // Atualiza quando o componente é montado\n\n  useEffect(() => {\n    getFetchNacionalities();\n  }, []); // Atualiza quando o componente é montado e quando a função é atualizada em razão do selectValue\n  // useEffect(() => { getFetchArea(); }, [getFetchArea]);\n\n  useEffect(() => {\n    if (selectValue === 'All') {\n      defaultAPI();\n    }\n\n    getFetchArea();\n  }, [selectValue]); // Atualiza quando o componente é montado e quando a função é atualizada em razão do mealsOfArea\n\n  useEffect(() => {\n    mealsCondition();\n  }, [mealsCondition]); // Seleção da option seta País no estado selectValue\n\n  function handleChange(_ref2) {\n    let {\n      target\n    } = _ref2;\n    setSelectValue(target.value);\n  }\n\n  function redirectToDetails(idReceita) {\n    history.push(`/foods/${idReceita}`);\n  } // Renderiza os cards de receita\n\n\n  function renderCards() {\n    if (mealsOfArea.length > 0) {\n      return mealsOfArea.map((_ref3, index) => {\n        let {\n          idMeal,\n          strMeal,\n          strMealThumb\n        } = _ref3;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-testid\": `${index}-recipe-card`,\n          onClick: () => redirectToDetails(idMeal),\n          onKeyDown: redirectToDetails,\n          role: \"button\",\n          tabIndex: 0,\n          className: \"containerFood\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            \"data-testid\": `${index}-card-img`,\n            src: strMealThumb,\n            alt: strMeal,\n            className: \"thumbFood\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": `${index}-card-name`,\n            className: \"titleFood\",\n            children: [' ', strMeal]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 11\n          }, this)]\n        }, strMeal, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this);\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"header-content\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        name: \"Explore Nationalities\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"nacionalities\",\n      \"data-testid\": \"explore-by-nationality-dropdown\",\n      onChange: handleChange,\n      className: \"select-dropbox\",\n      children: nacionalities.map((nacionality, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        \"data-testid\": `${nacionality}-option`,\n        value: nacionality,\n        children: nacionality\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerExhibition\",\n      children: renderCards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExploreFoodsNationalities, \"uM63vbQBJKda2BlVf/nCqGS3JSE=\", false, function () {\n  return [useHistory];\n});\n\n_c = ExploreFoodsNationalities;\nexport default ExploreFoodsNationalities;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExploreFoodsNationalities\");","map":{"version":3,"sources":["/home/alana/Trybe/Turma-17/projetos/Recipes-App/src/pages/ExploreFoodsNationalities.js"],"names":["React","useEffect","useState","useCallback","useHistory","Footer","Header","SearchIcon","DEFAULT_URL_API","MAX_NUMBER_CARDS","fetchApiArea","fecthNacionalitesApi","fetchFoodApi","ExploreFoodsNationalities","nacionalities","setNacionalities","selectValue","setSelectValue","mealsOfArea","setMealsOfArea","history","getFetchNacionalities","dataNacionalities","nacionalitiesKeys","map","strArea","defaultAPI","foodDefault","sliceFoodDefault","meals","slice","getFetchArea","areaFoods","mealsCondition","undefined","global","alert","length","push","idMeal","handleChange","target","value","redirectToDetails","idReceita","renderCards","index","strMeal","strMealThumb","nacionality"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Footer from '../components/Footer';\nimport Header from '../components/Header';\nimport SearchIcon from '../components/SearchIcon';\nimport { DEFAULT_URL_API, MAX_NUMBER_CARDS } from '../services/consts';\nimport fetchApiArea from '../services/fetchApiArea';\nimport fecthNacionalitesApi from '../services/fetchApiNacionalites';\nimport '../ExploreNationalities.css';\nimport fetchFoodApi from '../services/fetchApiFood';\n\nfunction ExploreFoodsNationalities() {\n  const [nacionalities, setNacionalities] = useState(['All']);\n  const [selectValue, setSelectValue] = useState('All');\n  const [mealsOfArea, setMealsOfArea] = useState([]);\n  // const [allFoods, setAllFoods] = useState([]);\n\n  const history = useHistory();\n\n  // Faz requisição para api com os países e seta no estado nacionalities\n  const getFetchNacionalities = async () => {\n    const dataNacionalities = await fecthNacionalitesApi();\n    const nacionalitiesKeys = dataNacionalities\n      .map(({ strArea }) => (strArea));\n    setNacionalities([...nacionalities, ...nacionalitiesKeys]);\n  };\n\n  const defaultAPI = async () => {\n    const foodDefault = await fetchFoodApi(DEFAULT_URL_API);\n    const sliceFoodDefault = foodDefault.meals.slice(0, MAX_NUMBER_CARDS);\n    setMealsOfArea(sliceFoodDefault);\n  };\n\n  // Faz requisição das receitas baseadas na nacionalidade.\n  // Pega as 12 primeiras receitas e armazena no estado mealsOfArea\n  const getFetchArea = async () => {\n    const areaFoods = await fetchApiArea(selectValue);\n    if (areaFoods === null) {\n      return;\n    }\n    setMealsOfArea(areaFoods.slice(0, MAX_NUMBER_CARDS));\n  };\n\n  // Lida com valores da Api armazenados no estado mealsOfArea\n  // Nos casos não encontrar receita ou se houver apenas 1 receita\n  const mealsCondition = useCallback(async () => {\n    if (mealsOfArea !== undefined) {\n      if (mealsOfArea === null) {\n        global.alert('Sorry, we haven\\'t found any recipes for these filters.');\n      } else if (mealsOfArea.length === 1) {\n        history.push(`/foods/${mealsOfArea[0].idMeal}`);\n      }\n    }\n  }, [mealsOfArea, history]);\n\n  // Atualiza quando o componente é montado\n  useEffect(() => { getFetchNacionalities(); }, []);\n\n  // Atualiza quando o componente é montado e quando a função é atualizada em razão do selectValue\n  // useEffect(() => { getFetchArea(); }, [getFetchArea]);\n\n  useEffect(() => {\n    if (selectValue === 'All') {\n      defaultAPI();\n    } getFetchArea();\n  }, [selectValue]);\n\n  // Atualiza quando o componente é montado e quando a função é atualizada em razão do mealsOfArea\n  useEffect(() => { mealsCondition(); }, [mealsCondition]);\n\n  // Seleção da option seta País no estado selectValue\n  function handleChange({ target }) {\n    setSelectValue(target.value);\n  }\n\n  function redirectToDetails(idReceita) {\n    history.push(`/foods/${idReceita}`);\n  }\n\n  // Renderiza os cards de receita\n  function renderCards() {\n    if (mealsOfArea.length > 0) {\n      return mealsOfArea.map(({ idMeal, strMeal, strMealThumb }, index) => (\n        <div\n          key={ strMeal }\n          data-testid={ `${index}-recipe-card` }\n          onClick={ () => redirectToDetails(idMeal) }\n          onKeyDown={ redirectToDetails }\n          role=\"button\"\n          tabIndex={ 0 }\n          className=\"containerFood\"\n        >\n          <img\n            data-testid={ `${index}-card-img` }\n            src={ strMealThumb }\n            alt={ strMeal }\n            className=\"thumbFood\"\n          />\n          <p data-testid={ `${index}-card-name` } className=\"titleFood\">\n            {' '}\n            { strMeal }\n          </p>\n        </div>\n      ));\n    }\n  }\n\n  return (\n    <div>\n      <header className=\"header-content\">\n        <Header name=\"Explore Nationalities\" />\n        <SearchIcon />\n      </header>\n      <select\n        name=\"nacionalities\"\n        data-testid=\"explore-by-nationality-dropdown\"\n        onChange={ handleChange }\n        className=\"select-dropbox\"\n      >\n        { nacionalities.map((nacionality, index) => (\n          <option\n            key={ index }\n            data-testid={ `${nacionality}-option` }\n            value={ nacionality }\n          >\n            {nacionality}\n          </option>\n        ))}\n      </select>\n      <div className=\"containerExhibition\">\n        { renderCards() }\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default ExploreFoodsNationalities;\n"]},"metadata":{},"sourceType":"module"}